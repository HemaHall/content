category: Analytics & SIEM
commonfields:
  id: Looker
  version: -1
configuration:
- display: API URL and port (e.g. https://example.looker.com:19999)
  name: url
  required: true
  type: 0
- defaultvalue: 'true'
  display: Trust any certificate (unsecure)
  name: unsecure
  required: false
  type: 8
- display: Use system proxy
  name: proxy
  required: false
  type: 8
- display: API3 Client ID
  name: client_id
  required: true
  type: 0
- display: API3 Client Secret
  name: client_secret
  required: true
  type: 4
description: Looker is a business intelligence software and big data analytics platform
  that helps you explore, analyze and share real-time business analytics easily.
display: Looker
name: Looker
script:
  commands:
  - arguments:
    - default: true
      description: Id of look
      isArray: false
      name: look_id
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      defaultValue: json
      description: Format of result
      isArray: false
      name: result_format
      predefined:
      - json
      - csv
      required: true
      secret: false
    - default: false
      defaultValue: '50'
      description: Maximum number of results to return (0 for looker-determined limit)
      isArray: false
      name: limit
      required: false
      secret: false
    - default: false
      description: Fields to return
      isArray: true
      name: fields
      required: false
      secret: false
    deprecated: false
    description: Run a given look's query and return the results in the requested
      format.
    execution: false
    name: looker-run-look
    outputs:
    - contextPath: Looker.Look.ID
      description: Look ID
      type: Number
    - contextPath: Looker.Look.Results
      description: Look Results
      type: Unknown
  - arguments:
    - default: true
      description: Match Look name
      isArray: false
      name: name
      required: false
      secret: false
    - default: false
      description: Filter on a particular space
      isArray: false
      name: space_id
      required: false
      secret: false
    - default: false
      description: Filter on dashboards created by a particular user
      isArray: false
      name: user_id
      required: false
      secret: false
    - default: false
      defaultValue: '50'
      description: Maximum number of looks to return (0 for looker-determined limit)
      isArray: false
      name: limit
      required: false
      secret: false
    deprecated: false
    description: Find saved looks matching search criteria
    execution: false
    name: looker-search-looks
    outputs:
    - contextPath: Looker.Look.ID
      description: Look ID
      type: Number
    - contextPath: Looker.Look.Name
      description: Look Name
      type: String
    - contextPath: Looker.Look.SpaceID
      description: ID of the space that contains the looker
      type: Number
    - contextPath: Looker.Look.SpaceName
      description: Name of the space that contains the looker
      type: String
    - contextPath: Looker.Look.LastUpdated
      description: The time that the look was last updated
      type: Date
  dockerimage: demisto/python3:3.7.3.221
  isfetch: false
  runonce: false
  script: "import demistomock as demisto\nfrom CommonServerPython import *\nfrom CommonServerUserPython\
    \ import *\n''' IMPORTS '''\n\nimport requests\nimport traceback\n\n# Disable\
    \ insecure warnings\nrequests.packages.urllib3.disable_warnings()\n\n''' GLOBALS/PARAMS\
    \ '''\nDEFAULT_RESULTS_LIMIT = 50\nMAX_TIMEOUT_MINUTES = 5\nSESSION_VALIDITY_THRESHOLD\
    \ = timedelta(minutes=MAX_TIMEOUT_MINUTES)\nCLIENT_ID = demisto.params().get('client_id')\n\
    CLIENT_SECRET = demisto.params().get('client_secret')\n# Remove trailing slash\
    \ to prevent wrong URL path to service\nSERVER = demisto.params()['url'][:-1]\
    \ if (demisto.params()['url'] and demisto.params()['url'].endswith('/')) \\\n\
    \    else demisto.params()['url']\n# Should we use SSL\nUSE_SSL = not demisto.params().get('unsecure',\
    \ False)\n# How many time before the first fetch to retrieve incidents\nFETCH_TIME\
    \ = demisto.params().get('fetch_time', '3 days')\n# Service base URL\nBASE_URL\
    \ = SERVER + '/api/3.0'\n# Request headers (preparation)\nHEADERS = {}\n\n\n'''\
    \ HELPER FUNCTIONS '''\n\n\ndef verify_url(url):\n    # validate url parameter\
    \ format, extract port\n    try:\n        server, port = url.rsplit(':', 1)\n\
    \        assert 0 < int(port) < 65536\n\n    except (ValueError, AssertionError):\n\
    \        return_error(\"Incorrect URL format. Use the following format: https://example.looker.com:19999\\\
    n\"\n                     \"The default port for Looker API is 19999.\")\n\n\n\
    def http_request(method, url_suffix, params=None, data=None, response_type='json'):\n\
    \    # A wrapper for requests lib to send our requests and handle requests and\
    \ responses better\n    res = requests.request(\n        method,\n        BASE_URL\
    \ + url_suffix,\n        verify=USE_SSL,\n        params=params,\n        data=data,\n\
    \        headers=HEADERS\n    )\n    # Handle error responses gracefully\n   \
    \ if res.status_code not in {200}:\n        raise requests.exceptions.HTTPError('Error\
    \ in API call to Looker [%d] - %s' % (res.status_code, res.reason))\n\n    return\
    \ res.json() if response_type == 'json' else res.content\n\n\ndef get_new_token():\n\
    \    data = {\n        'client_id': CLIENT_ID,\n        'client_secret': CLIENT_SECRET\n\
    \    }\n    response_json = http_request('POST', '/login', data=data)\n\n    return\
    \ {\n        'token': response_json['access_token'],\n        'expires': datetime.utcnow().timestamp()\
    \ + response_json['expires_in']\n    }\n\n\ndef get_session_token():\n    global\
    \ HEADERS\n    ic = demisto.getIntegrationContext()\n\n    if CLIENT_ID not in\
    \ ic or 'expires' not in ic[CLIENT_ID] \\\n            or datetime.fromtimestamp(ic[CLIENT_ID]['expires'])\
    \ < datetime.utcnow() + SESSION_VALIDITY_THRESHOLD:\n        ic[CLIENT_ID] = get_new_token()\n\
    \        if demisto.command() != 'test-module':\n            demisto.setIntegrationContext(ic)\n\
    \n    HEADERS['Authorization'] = 'token {}'.format(ic[CLIENT_ID]['token'])\n\n\
    \ndef get_limit():\n    try:\n        limit = int(demisto.args().get('limit',\
    \ DEFAULT_RESULTS_LIMIT))\n        return None if limit == 0 else limit\n\n  \
    \  except ValueError:\n        return_error(\"limit must be a number\")\n\n\n\
    def filter_search_looks_results(unfiltered_results):\n    fields_to_return = ()\n\
    \    fields_to_rename = {\n        'title': 'name'\n    }\n\n    if isinstance(unfiltered_results,\
    \ list):\n        return [filter_search_looks_results(x) for x in unfiltered_results]\n\
    \n\n''' COMMANDS + REQUESTS FUNCTIONS '''\n\n\ndef test_module():\n    \"\"\"\n\
    \    Performs basic get request to check connectivity and authentication\n   \
    \ \"\"\"\n    http_request('GET', '/user')\n\n\ndef run_look_command():\n    look_id\
    \ = demisto.args()['look_id']\n    result_format = demisto.args()['result_format']\n\
    \    limit = get_limit()\n    fields = argToList(demisto.args().get('result_format'))\n\
    \n    contents = run_look_request(look_id, result_format, limit, fields)\n\n \
    \   if result_format == 'json':\n        formatted_contents = camelize(contents,\
    \ delim='_')\n        if not isinstance(formatted_contents, list):\n         \
    \   formatted_contents = [formatted_contents]\n        context = {\n         \
    \   'Looker.look(val.ID && val.ID === obj.ID)': {\n                'ID': int(look_id),\n\
    \                'Results': formatted_contents\n            }\n        }\n\n \
    \       demisto.results({\n            'Type': entryTypes['note'],\n         \
    \   'ContentsFormat': formats['json'],\n            'Contents': contents,\n  \
    \          'ReadableContentsFormat': formats['markdown'],\n            'HumanReadable':\
    \ tableToMarkdown(f'Results for look #{look_id}', formatted_contents, removeNull=True),\n\
    \            'EntryContext': context\n        })\n\n    elif result_format ==\
    \ 'csv':\n        demisto.results(fileResult('look_result.csv', contents, entryTypes['entryInfoFile']))\n\
    \n\ndef run_look_request(look_id, result_format, limit, fields):\n    endpoint_url\
    \ = f'/looks/{look_id}/run/{result_format}'\n    params = {}\n    if limit:\n\
    \        params['limit'] = limit\n    if fields:\n        params['fields'] = fields\n\
    \    return http_request('GET', endpoint_url, params=params, response_type=result_format)\n\
    \n\ndef search_looks_command():\n    command_args = ('space_id', 'user_id')  #\
    \ Possible command arguments\n    args_dict = {k: demisto.args()[k] for k in command_args\
    \ if k in demisto.args()}  # Get args that were passed\n    args_dict['limit']\
    \ = get_limit()  # Argument with special logic\n    if 'name' in demisto.args():\n\
    \        args_dict['title'] = demisto.args()['name'] \n    args_dict['fields']\
    \ = 'id, title, space, updated_at'\n    # # Traditional argument collection:\n\
    \    # title = demisto.args()['title']\n    # sapce_id = demisto.args()['sapce_id']\n\
    \    # user_id = demisto.args()['user_id']\n    # limit = get_limit()\n\n    contents\
    \ = search_looks_request(args_dict)\n    context = {}\n    for look in contents:\n\
    \        look_id = look['id']\n        context[f'Looker.look(val.ID && val.ID\
    \ === {look_id})'] = {\n            'ID': look_id,\n            'Details': look\n\
    \        }\n\n    demisto.results({\n        'Type': entryTypes['note'],\n   \
    \     'ContentsFormat': formats['json'],\n        'Contents': contents,\n    \
    \    'ReadableContentsFormat': formats['markdown'],\n        'HumanReadable':\
    \ tableToMarkdown(f'Look search results', contents, removeNull=True),\n      \
    \  'EntryContext': context\n    })\n\n\ndef search_looks_request(args):\n    endpoint_url\
    \ = '/looks/search'\n    params = {k: v for k, v in args.items() if v}\n    return\
    \ http_request('GET', endpoint_url, params=params)\n\n\n''' COMMANDS MANAGER /\
    \ SWITCH PANEL '''\n\nLOG('Command being called is %s' % (demisto.command()))\n\
    try:\n    handle_proxy()\n    verify_url(SERVER)\n    get_session_token()\n\n\
    \    if demisto.command() == 'test-module':\n        test_module()\n        demisto.results('ok')\n\
    \    elif demisto.command() == 'looker-run-look':\n        run_look_command()\n\
    \    elif demisto.command() == 'looker-search-looks':\n        search_looks_command()\n\
    \n# Log exceptions\nexcept Exception as e:\n    LOG(e)\n    LOG(traceback.format_exc())\n\
    \    LOG.print_log()\n    raise"
  type: python
